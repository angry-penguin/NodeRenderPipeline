#pragma kernel DepthCopy
#pragma kernel DepthPyramid

#include "Packages/com.arycama.noderenderpipeline/ShaderLibrary/Utility.hlsl"

RWTexture2D<float2> _Result;
RWTexture2D<float2> _Source;

Texture2D<float> Input;
uint _Width, _Height;

[numthreads(8, 8, 1)]
void DepthCopy(uint2 id : SV_DispatchThreadID)
{
	float depth = Input[id];
	_Result[id] = depth;
}

float GetMinDepth(uint2 coord)
{
	uint2 size = uint2(_Width, _Height);
	uint2 clampedCoord = min(coord, size - 1);
	return _Source[clampedCoord].r;
}

float GetMaxDepth(uint2 coord)
{
	uint2 size = uint2(_Width, _Height);
	uint2 clampedCoord = min(coord, size - 1);
	return _Source[clampedCoord].g;
}

[numthreads(8, 8, 1)]
void DepthPyramid(uint2 id : SV_DispatchThreadID)
{
	uint2 size = uint2(_Width, _Height);
	uint2 coord = 2 * id;
	
	float4 minDepths;
	minDepths.x = GetMinDepth(coord + uint2(0, 0));
	minDepths.y = GetMinDepth(coord + uint2(1, 0));
	minDepths.z = GetMinDepth(coord + uint2(0, 1));
	minDepths.w = GetMinDepth(coord + uint2(1, 1));
	float minDepth = Min4(minDepths);
	
	float4 maxDepths;
	maxDepths.x = GetMaxDepth(coord + uint2(0, 0));
	maxDepths.y = GetMaxDepth(coord + uint2(1, 0));
	maxDepths.z = GetMaxDepth(coord + uint2(0, 1));
	maxDepths.w = GetMaxDepth(coord + uint2(1, 1));
	float maxDepth = Max4(maxDepths);
	
	// Incorporate additional texels if the previous level's width or height (or both) are odd.
	bool shouldIncludeExtraColumnFromPreviousLevel = (size.x & 1) != 0;
	bool shouldIncludeExtraRowFromPreviousLevel = (size.y & 1) != 0;
	
	if (shouldIncludeExtraColumnFromPreviousLevel)
	{
		float4 extraColumnTexelValues;
		extraColumnTexelValues.x = GetMinDepth(coord + uint2(2, 0));
		extraColumnTexelValues.y = GetMinDepth(coord + uint2(2, 1));
		extraColumnTexelValues.z = GetMaxDepth(coord + uint2(2, 1));
		extraColumnTexelValues.w = GetMaxDepth(coord + uint2(2, 1));

		// In the case where the width and height are both odd, need to include the
        // 'corner' value as well.
		if (shouldIncludeExtraRowFromPreviousLevel)
		{
			float cornerTexelValueMin = GetMinDepth(coord + uint2(2, 2));
			float cornerTexelValueMax = GetMaxDepth(coord + uint2(2, 2));
			minDepth = min(minDepth, cornerTexelValueMin);
			maxDepth = max(maxDepth, cornerTexelValueMax);
		}
		
		minDepth = Min3(float3(minDepth, extraColumnTexelValues.xy));
		maxDepth = Max3(float3(maxDepth, extraColumnTexelValues.zw));
	}
	
	if (shouldIncludeExtraRowFromPreviousLevel)
	{
		float2 extraRowTexelValuesMin;
		extraRowTexelValuesMin.x = GetMinDepth(coord + uint2(0, 2));
		extraRowTexelValuesMin.y = GetMinDepth(coord + uint2(1, 2));
		minDepth = Min3(float3(minDepth, extraRowTexelValuesMin.xy));
		
		float2 extraRowTexelValuesMax;
		extraRowTexelValuesMax.x = GetMaxDepth(coord + uint2(0, 2));
		extraRowTexelValuesMax.y = GetMaxDepth(coord + uint2(1, 2));
		maxDepth = Max3(float3(maxDepth, extraRowTexelValuesMax.xy));
	}

	_Result[id] = float2(minDepth, maxDepth);
}
