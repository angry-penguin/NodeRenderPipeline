#pragma kernel Temporal

#include "Packages/com.arycama.noderenderpipeline/ShaderLibrary/Deferred.hlsl"

RWTexture2D<float3> _Result;
Texture2D<float3> _Input, _History;
Texture2D<float2> _MotionVectors;
Texture2D<float> _Depth;
uint _MaxWidth, _MaxHeight;

[numthreads(8, 8, 1)]
void Temporal(uint2 id : SV_DispatchThreadID)
{
	// Reprojection
	float2 motion = _MotionVectors[id];
	float2 uv = (id + 0.5) * _ScreenSize.zw;
	float2 previousUv = uv - motion;
	
	float3 minValue = FloatMax, maxValue = FloatMin;
	float3 mean = 0.0, stdDev = 0.0;
	for (int y = -1; y <= 1; y++)
	{
		for (int x = -1; x <= 1; x++)
		{
			float3 sample = _Input[id + int2(x, y)];
			sample = RGBToYCoCg(sample);
			sample *= rcp(1.0 + sample.r);
			minValue = min(minValue, sample);
			maxValue = max(maxValue, sample);
			mean += sample;
			stdDev += sample * sample;
		}
	}
	
	mean /= 9.0;
	stdDev = sqrt(abs(stdDev / 9.0 - Sq(mean)));
	
	float3 input = _Input[id];
	input = RGBToYCoCg(input);
	input *= rcp(1.0 + input.r);
	
	float3 history = _History.SampleLevel(_LinearClampSampler, previousUv, 0.0);
	history = RGBToYCoCg(history);
	history *= rcp(1.0 + history.r);
	history = ClipToAABB(history, mean, stdDev);
	
	float3 result = lerp(history, input, 0.05);
	result *= rcp(1.0 - result.r);
	result = YCoCgToRGB(result);
	
	_Result[id] = result;
	//_Result[id] = _Input[id];
}
