#pragma kernel GenerateLengthToSmoothness
#pragma kernel ShortenNormal
#pragma kernel MipNormalAndSmoothness

#include "Packages/com.arycama.noderenderpipeline/ShaderLibrary/Core.hlsl"
#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Color.hlsl"
#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Packing.hlsl"

RWTexture2D<float4> _NormalResult, _SmoothnessResult;
RWTexture2D<float> _LengthToRoughnessResult;
Texture2D<float4> _NormalInput, _SmoothnessInput;
float _IsSrgb;
uint _Mip;
float _Resolution, _MaxIterations;

float4 PackNormalDxt(float3 normal)
{
    return float4(1.0, normal.y * 0.5 + 0.5, 0.0, normal.x * 0.5 + 0.5);
}

[numthreads(8, 8, 1)]
void GenerateLengthToSmoothness(uint2 id : SV_DispatchThreadID)
{
    float uv = id.x / (_Resolution - 1.0);
    float t = uv / 3.0 + 2.0 / 3.0; // Remap target

    // Bisection
    float a = 0.0;
    float b = 1.0;

    float fa = RoughnessToNormalLength(a) - t;
    for (float i = 0; i < _MaxIterations; i++)
    {
        float p = a + (b - a) / 2;
        float fp = RoughnessToNormalLength(p) - t;

        if (sign(fa) * sign(fp) > 0.0)
        {
            a = p;
            fa = fp;
        }
        else
        {
            b = p;
        }
    }

    _LengthToRoughnessResult[id] = a + (b - a) / 2;
}

[numthreads(8, 8, 1)]
void ShortenNormal(uint2 id : SV_DispatchThreadID)
{
    float smoothness = _SmoothnessInput[id].a;
    float3 normal = UnpackNormal(_NormalInput[id]);
    float len = SmoothnessToNormalLength(smoothness);
    _NormalResult[id] = float4(normal * len, 1.0);
}

[numthreads(8, 8, 1)]
void MipNormalAndSmoothness(uint2 id : SV_DispatchThreadID)
{
    float3 shortenedNormal = _NormalInput.mips[_Mip][id].rgb;
    float smoothness = LengthToSmoothness(length(shortenedNormal));
    float3 smoothnessInput = _SmoothnessInput.mips[_Mip][id].rgb;

    if (_IsSrgb)
        smoothnessInput = LinearToSRGB(smoothnessInput);

    _SmoothnessResult[id] = float4(smoothnessInput, smoothness);
    _NormalResult[id] = PackNormalDxt(normalize(shortenedNormal));
}