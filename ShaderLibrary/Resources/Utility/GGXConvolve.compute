#pragma kernel GGXConvolve

#include "Packages/com.arycama.noderenderpipeline/ShaderLibrary/Core.hlsl"
#include "Packages/com.arycama.noderenderpipeline/ShaderLibrary/Geometry.hlsl"
#include "Packages/com.arycama.noderenderpipeline/ShaderLibrary/GGX.hlsl"
#include "Packages/com.arycama.noderenderpipeline/ShaderLibrary/Material.hlsl"
#include "Packages/com.arycama.noderenderpipeline/ShaderLibrary/MatrixUtils.hlsl"
#include "Packages/com.arycama.noderenderpipeline/ShaderLibrary/Sampling.hlsl"

RWTexture2DArray<float3> Result;
TextureCube<float3> Input;

float4x4 _PixelCoordToViewDirWS[6];
float InvOmegaP, Level;

[numthreads(8, 8, 1)]
void GGXConvolve(uint3 id : SV_DispatchThreadID)
{
	float3 V = -MultiplyVector(_PixelCoordToViewDirWS[id.z], float3(id.xy + 0.5, 1.0), true);
	float3 N = V;
	float perceptualRoughness = MipmapLevelToPerceptualRoughness(Level);
	float roughness = PerceptualRoughnessToRoughness(perceptualRoughness);

	float3x3 localToWorld = GetLocalFrame(N);
	
	float NdotV = 1; // N == V

	float3 lightInt = float3(0.0, 0.0, 0.0);
	float cbsdfInt = 0.0;

	uint sampleCount = GetIBLRuntimeFilterSampleCount(Level);
	for (uint i = 0; i < sampleCount; ++i)
	{
		float3 L;
		float NdotL, NdotH, LdotH;

		float2 u = Fibonacci2d(i, sampleCount);

        // Note: if (N == V), all of the microsurface normals are visible.
		SampleGGXDir(u, V, localToWorld, roughness, L, NdotL, NdotH, LdotH, true);

		if (NdotL <= 0)
			continue; // Note that some samples will have 0 contribution

        // Use lower MIP-map levels for fetching samples with low probabilities
        // in order to reduce the variance.
        // Ref: http://http.developer.nvidia.com/GPUGems3/gpugems3_ch20.html
        //
        // - OmegaS: Solid angle associated with the sample
        // - OmegaP: Solid angle associated with the texel of the cubemap

        // float PDF = D * NdotH * Jacobian, where Jacobian = 1 / (4 * LdotH).
        // Since (N == V), NdotH == LdotH.
		float pdf = 0.25 * D_GGX(NdotH, roughness);
		
        // TODO: improve the accuracy of the sample's solid angle fit for GGX.
		float omegaS = rcp(sampleCount) * rcp(pdf);

        // 'invOmegaP' is precomputed on CPU and provided as a parameter to the function.
        // float omegaP = FOUR_PI / (6.0 * cubemapWidth * cubemapWidth);
		const float mipBias = roughness;
		float mipLevel = 0.5 * log2(omegaS * InvOmegaP) + mipBias;

        // TODO: use a Gaussian-like filter to generate the MIP pyramid.
		float3 val = Input.SampleLevel(_TrilinearClampSampler, L, mipLevel);

        // The goal of this function is to use Monte-Carlo integration to find
        // X = Integral{Radiance(L) * CBSDF(L, N, V) dL} / Integral{CBSDF(L, N, V) dL}.
        // Note: Integral{CBSDF(L, N, V) dL} is given by the FDG texture.
        // CBSDF  = F * D * G * NdotL / (4 * NdotL * NdotV) = F * D * G / (4 * NdotV).
        // PDF    = D * NdotH / (4 * LdotH).
        // Weight = CBSDF / PDF = F * G * LdotH / (NdotV * NdotH).
        // Since we perform filtering with the assumption that (V == N),
        // (LdotH == NdotH) && (NdotV == 1) && (Weight == F * G).
        // Therefore, after the Monte Carlo expansion of the integrals,
        // X = Sum(Radiance(L) * Weight) / Sum(Weight) = Sum(Radiance(L) * F * G) / Sum(F * G).

        // The choice of the Fresnel factor does not appear to affect the result.
		float F = 1; // F_Schlick(F0, LdotH);
		float G = V_SmithJointGGX(NdotL, NdotV, roughness) * NdotL * NdotV; // 4 cancels out

		lightInt += F * G * val;
		cbsdfInt += F * G;
	}

	Result[id] = lightInt / cbsdfInt;
}