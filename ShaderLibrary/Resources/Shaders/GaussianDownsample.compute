#pragma kernel GaussianDownsample

#include "Packages/com.arycama.noderenderpipeline/ShaderLibrary/Core.hlsl"

RWTexture2D<float3> _Source;
RWTexture2D<float3> _Destination;

float4 _Size;       // x: src width, y: src height, zw: unused
float _Mip;

// 16x16 pixels with an 8x8 center that we will be blurring writing out. Each uint is two color
// channels packed together.
// The reason for separating channels is to reduce bank conflicts in the local data memory
// controller. A large stride will cause more threads to collide on the same memory bank.
groupshared uint gs_cacheR[128];
groupshared uint gs_cacheG[128];
groupshared uint gs_cacheB[128];

float3 BlurPixels(float3 a, float3 b, float3 c, float3 d, float3 e, float3 f, float3 g, float3 h, float3 i)
{
    return 0.27343750 * (e    )
         + 0.21875000 * (d + f)
         + 0.10937500 * (c + g)
         + 0.03125000 * (b + h)
         + 0.00390625 * (a + i);
}

void Store2Pixels(uint index, float3 pixel1, float3 pixel2)
{
    gs_cacheR[index] = f32tof16(pixel1.r) | f32tof16(pixel2.r) << 16;
    gs_cacheG[index] = f32tof16(pixel1.g) | f32tof16(pixel2.g) << 16;
    gs_cacheB[index] = f32tof16(pixel1.b) | f32tof16(pixel2.b) << 16;
}

void Load2Pixels(uint index, out float3 pixel1, out float3 pixel2)
{
    uint rr = gs_cacheR[index];
    uint gg = gs_cacheG[index];
    uint bb = gs_cacheB[index];
    pixel1 = float3(f16tof32(rr      ), f16tof32(gg      ), f16tof32(bb      ));
    pixel2 = float3(f16tof32(rr >> 16), f16tof32(gg >> 16), f16tof32(bb >> 16));
}

void Store1Pixel(uint index, float3 pixel)
{
    gs_cacheR[index] = asuint(pixel.r);
    gs_cacheG[index] = asuint(pixel.g);
    gs_cacheB[index] = asuint(pixel.b);
}

void Load1Pixel(uint index, out float3 pixel)
{
	pixel = asfloat(uint3(gs_cacheR[index], gs_cacheG[index], gs_cacheB[index]));
}

// Blur two pixels horizontally.  This reduces LDS reads and pixel unpacking.
void BlurHorizontally(uint outIndex, uint leftMostIndex)
{
    float3 s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;
    Load2Pixels(leftMostIndex + 0, s0, s1);
    Load2Pixels(leftMostIndex + 1, s2, s3);
    Load2Pixels(leftMostIndex + 2, s4, s5);
    Load2Pixels(leftMostIndex + 3, s6, s7);
    Load2Pixels(leftMostIndex + 4, s8, s9);

    Store1Pixel(outIndex    , BlurPixels(s0, s1, s2, s3, s4, s5, s6, s7, s8));
    Store1Pixel(outIndex + 1, BlurPixels(s1, s2, s3, s4, s5, s6, s7, s8, s9));
}

float3 BlurVertically(uint2 pixelCoord, uint topMostIndex)
{
    float3 s0, s1, s2, s3, s4, s5, s6, s7, s8;
    Load1Pixel(topMostIndex     , s0);
    Load1Pixel(topMostIndex +  8, s1);
    Load1Pixel(topMostIndex + 16, s2);
    Load1Pixel(topMostIndex + 24, s3);
    Load1Pixel(topMostIndex + 32, s4);
    Load1Pixel(topMostIndex + 40, s5);
    Load1Pixel(topMostIndex + 48, s6);
    Load1Pixel(topMostIndex + 56, s7);
    Load1Pixel(topMostIndex + 64, s8);

    return BlurPixels(s0, s1, s2, s3, s4, s5, s6, s7, s8);
}

[numthreads(8, 8, 1)]
void GaussianDownsample(uint2 groupId : SV_GroupID, uint2 groupThreadId : SV_GroupThreadID, uint2 dispatchThreadId : SV_DispatchThreadID)
{
    // Upper-left pixel coordinate of quad that this thread will read
	int2 threadUL = (groupThreadId << 2) + (groupId << 4) - 8 + 1;
	uint2 uthreadUL = uint2(max(0, threadUL));

	uint2 size = uint2(_Size.xy) - 1u;
	float3 p00 = _Source[min(uthreadUL + uint2(0u, 0u), size)];
	float3 p10 = _Source[min(uthreadUL + uint2(1u, 0u), size)];
	float3 p11 = _Source[min(uthreadUL + uint2(1u, 1u), size)];
	float3 p01 = _Source[min(uthreadUL + uint2(0u, 1u), size)];
    
    // Ifdef fade fireflies
	p00.rgb /= 1.0 + Luminance(p00.rgb);
	p10.rgb /= 1.0 + Luminance(p10.rgb);
	p01.rgb /= 1.0 + Luminance(p01.rgb);
	p11.rgb /= 1.0 + Luminance(p11.rgb);

    // Store the 4 downsampled pixels in LDS
	uint destIdx = groupThreadId.x + (groupThreadId.y << 4u);
	Store2Pixels(destIdx, p00, p10);
	Store2Pixels(destIdx + 8u, p01, p11);

	GroupMemoryBarrierWithGroupSync();

    // Horizontally blur the pixels in LDS
	uint row = groupThreadId.y << 4u;
	BlurHorizontally(row + (groupThreadId.x << 1u), row + groupThreadId.x + (groupThreadId.x & 4u));

	GroupMemoryBarrierWithGroupSync();

    // Vertically blur the pixels in LDS and write the result to memory
	float3 result = BlurVertically(dispatchThreadId, (groupThreadId.y << 3u) + groupThreadId.x);
    
    // Write to the final target
	result *= rcp(1.0 - Luminance(result));
	_Destination[dispatchThreadId] = result;
}
