#pragma kernel GenerateIDMap

#include "Packages/com.arycama.noderenderpipeline/ShaderLibrary/Random.hlsl"
#include "Packages/com.arycama.noderenderpipeline/ShaderLibrary/Terrain.hlsl"

RWTexture2D<uint> _Result;
Texture2D<float4> _Input0, _Input1, _Input2, _Input3, _Input4, _Input5, _Input6, _Input7;
Texture2DArray<float> _ExtraLayers;
Buffer<uint> _ProceduralIndices;
uint _TextureCount, _LayerCount, _TotalLayers;
float2 _Resolution;

float nrand(float2 n)
{
	return frac(sin(dot(n.xy, float2(12.9898, 78.233))) * 43758.5453);
}

float2 hash(float2 p)
{
	float2 r = mul(float2x2(127.1, 311.7, 269.5, 183.3), p);
	return frac(sin(r) * 43758.5453);
}

[numthreads(8, 8, 1)]
void GenerateIDMap(uint2 id : SV_DispatchThreadID)
{
	uint index0 = 0, index1 = 0;
	float weight0 = 0.0, weight1 = 0.0;
	float2 uv = (id + 0.5) / _Resolution;
	
	for (uint i = 0; i < _TotalLayers; i++)
	{
		float alpha = 0.0;
		
		// Ugh
		if (i < _TextureCount)
		{
			if(i < 4)
				alpha += _Input0[id][i % 4];
			else if(i < 8)
				alpha += _Input1[id][i % 4];
			else if (i < 12)
				alpha += _Input2[id][i % 4];
			else if (i < 16)
				alpha += _Input3[id][i % 4];
			else if (i < 20)
				alpha += _Input4[id][i % 4];
			else if (i < 24)
				alpha += _Input5[id][i % 4];
			else if (i < 28)
				alpha += _Input6[id][i % 4];
			else if (i < 32)
				alpha += _Input7[id][i % 4];
		}
		
		// Procedural layer
		uint proceduralIndex = _ProceduralIndices[i];
		if(proceduralIndex > 0)
			alpha += _ExtraLayers[uint3(id, proceduralIndex - 1)];
		
        // Check the strength of the current splatmap layer
		if (alpha > weight0)
		{
            // Store the current highest as the second highest 
			index1 = index0;
			weight1 = weight0;

            // Store the current layer as the new strongest layer
			index0 = i;
			weight0 = alpha;
		}
		else if (alpha > weight1)
		{
			index1 = i;
			weight1 = alpha;
		}
	}
	
	// Center of texel in control map space
	float2 controlCenter = (floor(uv * (_Resolution - 1.0)) + 0.5) / _Resolution;
	
	uint rand00 = JenkinsHash(controlCenter * _TerrainLayerData[index0].Scale * 2.0 * sqrt(3.0));
	float rotation0 = ConstructFloat(rand00) * _TerrainLayerData[index0].Rotation;
	
	uint rand01 = JenkinsHash(rand00);
	float offsetX0 = ConstructFloat(rand01) * _TerrainLayerData[index0].Stochastic;
	
	uint rand02 = JenkinsHash(rand01);
	float offsetY0 = ConstructFloat(rand02) * _TerrainLayerData[index0].Stochastic;
	
	uint rand10 = JenkinsHash(controlCenter * _TerrainLayerData[index1].Scale * 2.0 * sqrt(3.0));
	float rotation1 = ConstructFloat(rand10) * _TerrainLayerData[index1].Rotation;
	
	uint rand11 = JenkinsHash(rand10);
	float offsetX1 = ConstructFloat(rand11) * _TerrainLayerData[index1].Stochastic;
	
	uint rand12 = JenkinsHash(rand11);
	float offsetY1 = ConstructFloat(rand12) * _TerrainLayerData[index1].Stochastic;
	
	float triplanar = 0.0;
	
	// Normalize weights so they sum to 1
	float weightSum = weight0 + weight1;
	if(weightSum > 0.0)
	{
		//weight0 /= weightSum;
		//weight1 /= weightSum;
	}
	
	float blend = weight1;
	
	// If indices are equal, keep weight at 0, else we can assume it starts from the lowest value, eg 1.0 / 9.0
	//if(weight1 > 0.0 && index0 != index1)
	//	blend = RangeRemap(1.0 / 15.0, 7.0 / 15.0, blend);
	//else
	//	index1 = index0;
	
	//if(weight1 == 0.0)
	//	index1 = index0;
	
	uint result = (index0 & 0xF) << 0;
	result |= (uint(round(offsetX0 * 3.0)) & 0x3) << 4;
	result |= (uint(round(offsetY0 * 3.0)) & 0x3) << 6;
	result |= (uint(round(rotation0 * 31.0)) & 0x1F) << 8;
	
	result |= (index1 & 0xF) << 13;
	result |= (uint(round(offsetX1 * 3.0)) & 0x3) << 17;
	result |= (uint(round(offsetY1 * 3.0)) & 0x3) << 19;
	result |= (uint(round(rotation1 * 31.0)) & 0x1F) << 21;
	
	float nrnd0 = 2.0 * nrand((id + 0.5) / _Resolution) - 1.0;
	nrnd0 *= 1.0 - abs(2.0 * frac(blend * 15.0) - 1.0);
   
	result |= (uint(round(blend * 15.0)) & 0xF) << 26;
	//result |= (uint((1.0 - weight0) * 16.0) & 0xF) << 26;
	//result |= (uint(triplanar * 4.0) & 0x3) << 30;
	
	_Result[id] = result;
}