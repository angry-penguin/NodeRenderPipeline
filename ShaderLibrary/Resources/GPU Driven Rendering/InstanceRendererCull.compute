#pragma kernel Visibility

#pragma multi_compile _ HIZ_ON

#include "Packages/com.arycama.noderenderpipeline/ShaderLibrary/Terrain.hlsl"
#include "Packages/com.arycama.noderenderpipeline/ShaderLibrary/IndirectRendering.hlsl"
#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/GeometricTools.hlsl"

struct Bounds
{
	float3 min;
	float pad0;
	float3 size;
	float pad1;
};

struct InstanceTypeData
{
	float3 localReferencePoint;
	float radius;
	uint lodCount, lodSizeBufferPosition, instanceCount, lodRendererOffset;
};

struct InstanceTypeLodData
{
	uint rendererStart, rendererCount, instancesStart, pad;
};

float4 _Resolution;
float4x4 _ScreenMatrix;

// Stores the instanceID of each renderer if visible, or 0
RWStructuredBuffer<uint> _RendererInstanceIDs, _RendererCounts;
RWStructuredBuffer<float> _LodFades;

StructuredBuffer<float3x4> _Positions;
StructuredBuffer<InstanceTypeData> _InstanceTypeData;
StructuredBuffer<InstanceTypeLodData> _InstanceTypeLodData;
StructuredBuffer<Bounds> _RendererBounds;

Buffer<float> _LodSizes;
Buffer<uint> _InstanceTypes;

uint _InstanceCount;

[numthreads(512, 1, 1)]
void Visibility(uint id : SV_DispatchThreadID)
{
	// Early exit for out of bounds threads
	if (id >= _InstanceCount)
		return;
	
	// Fetch the world matrix and type for this instance
	float3x4 objectToWorld = _Positions[id];
	objectToWorld = ApplyCameraTranslationToMatrix(objectToWorld);
	
	uint instanceType = _InstanceTypes[id];
	
	// Fetch data for this instance type
	InstanceTypeData instanceTypeData = _InstanceTypeData[instanceType];
	
	// Calculate max scale from objectToWorldTranspose matrix
	float scale = Max3(MatrixScaleRowMajor(objectToWorld));
	
	// Early exit if lod sphere is outside frustum
	float3 spherePositionWS = MultiplyPoint3x4(objectToWorld, instanceTypeData.localReferencePoint);
	for (uint i = 0; i < _CullingPlanesCount; i++)
	{
		if (DistanceFromPlane(spherePositionWS, _CullingPlanes[i]) < (-instanceTypeData.radius * scale))
			return;
	}
		
	// Determine correct lod
	uint lod = UINT_MAX;
	float radius = ProjectedSphereRadius(instanceTypeData.radius * scale, spherePositionWS);
	for (i = 0; i < instanceTypeData.lodCount; i++)
	{
		float lodSize = _LodSizes[i + instanceTypeData.lodSizeBufferPosition];
		if (radius <= lodSize)
			continue;
			
		lod = i;
		
		// Calculate+Write out the lod fade if visible
		float prevLod = i == 0 ? 1 : _LodSizes[i - 1 + instanceTypeData.lodSizeBufferPosition];
		float delta = lodSize - prevLod;
		_LodFades[id] = (delta == 0) ? 0 : saturate((radius - prevLod) * rcp(delta));
		
		break;
	}
	
	// If smaller than the smallest lod size, this lod is culled, so do not render
	if (lod == UINT_MAX)
		return;
	
	// Index/length into the buffer of renderers for this lod, so that we can check their visibility
	InstanceTypeLodData instanceTypeLodData = _InstanceTypeLodData[instanceTypeData.lodRendererOffset + lod];
	
	// Determine if each renderer for this lod is visible
	for (i = 0; i < instanceTypeLodData.rendererCount; i++)
	{
		// Fetch renderer bounds, transform to world space
		Bounds bounds = _RendererBounds[instanceTypeLodData.rendererStart + i];

		float3 boundsMin, boundsMax, screenMin, screenMax;
		bool isInitialized = false;

		[unroll]
		for (float z = 0; z < 2; z++)
		{
			[unroll]
			for (float y = 0; y < 2; y++)
			{
				[unroll]
				for (float x = 0; x < 2; x++)
				{
					// Transform corners from object to world space, and calculate min/max for Frustum culling
					float3 positionOS = bounds.min + bounds.size * float3(x, y, z);
					float3 positionWS = MultiplyPoint3x4(objectToWorld, positionOS);
					boundsMin = isInitialized ? min(boundsMin, positionWS) : positionWS;
					boundsMax = isInitialized ? max(boundsMax, positionWS) : positionWS;
					
					// Transform position to clip space for HiZ
					float3 positionCS = MultiplyPointProj(_ScreenMatrix, positionWS).xyz;
					positionCS.xy = positionCS.xy * 0.5 + 0.5;
					
					screenMin = isInitialized ? min(screenMin, positionCS) : positionCS;
					screenMax = isInitialized ? max(screenMax, positionCS) : positionCS;
					
					isInitialized = true;
				}
			}
		}
		
		float3 center = (boundsMin + boundsMax) * 0.5;
		float3 extents = (boundsMax - boundsMin) * 0.5;
		
		if (!FrustumCull(center, extents))
			continue;
		
		#ifdef HIZ_ON
			if (!HiZCull(screenMin, screenMax, _Resolution.zw))
				continue;
		#endif
				
		// Write InstanceID into the renderer if visible
		// There is one uint per renderer per instance, and one  thread per instance. ThreadID*rendererCoutn + rendererOffset gives us the destination
		uint dstIndex = instanceTypeLodData.instancesStart + i * instanceTypeData.instanceCount + id;
			
		// Increment the global counter for this instance
		_RendererInstanceIDs[dstIndex] = id + 1;
		InterlockedAdd(_RendererCounts[instanceTypeLodData.rendererStart + i], 1);
	}
}
