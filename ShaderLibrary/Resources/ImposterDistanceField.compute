#include "Packages/com.arycama.noderenderpipeline/ShaderLibrary/Color.hlsl"

#pragma kernel SeedPixels
#pragma kernel JumpFlood
#pragma kernel CalculateMinMax
#pragma kernel Resolve

Texture2DArray<float4> _Texture0, _Texture1, _Texture2, _Texture3, _Texture4, _Texture5, _Texture6;
RWTexture2DArray<float4> _Texture0Write, _Texture1Write, _Texture2Write, _Texture3Write, _Texture4Write, _Texture5Write, _Texture6Write, _Texture7Write;
float _Texture0sRGB, _Texture1sRGB, _Texture2sRGB, _Texture3sRGB, _Texture4sRGB, _Texture5sRGB, _Texture6sRGB;

Texture2DArray<float2> _Input;
RWTexture2DArray<float2> _Result;
int _CellSize, _Offset, _Resolution, _TextureCount;
float _InvCellSize, _InvResolution, _MaxDistance;

RWBuffer<int> _MaxDepths;

[numthreads(8, 8, 1)]
void SeedPixels(uint3 id : SV_DispatchThreadID)
{
	float minDist = sqrt(2);
	float2 minSeed = -1;
	
	float sourceAlpha = _Texture0[id].a;
	bool isOpaque = sourceAlpha >= 0.5;
	
	for (int y = -1; y <= 1; y++)
	{
		for (int x = -1; x <= 1; x++)
		{
			// Don't compare the middle value
			if (x == 0 && y == 0)
				continue;
				
			int2 uv = id.xy + int2(x, y);
			if (any(uv < 0 || uv >= _Resolution))
				continue;
				
			float neighborAlpha = _Texture0[int3(uv, id.z)].a;
			bool isNeighborOpaque = neighborAlpha >= 0.5;
			if (isOpaque == isNeighborOpaque)
				continue;
			
			float2 midpoint = id.xy + 0.5 + 0.5 * int2(x, y);
			float dist = distance((id.xy + 0.5) * _InvResolution, midpoint * _InvResolution);
			if (dist >= minDist)
				continue;
			
			minDist = dist;
			minSeed = midpoint;
		}
	}

	_Result[id] = minSeed;
}

[numthreads(8, 8, 1)]
void JumpFlood(uint3 id : SV_DispatchThreadID)
{
	float minDist = sqrt(2);
	float2 minSeed = -1;
	
	for (int y = -1; y <= 1; y++)
	{
		for (int x = -1; x <= 1; x++)
		{
			int2 uv = id.xy + int2(x, y) * _Offset;
			if (any(uv < 0 || uv >= _Resolution))
				continue;
		
			float2 seed = _Input[int3(uv, id.z)];
			if (all(seed == -1))
				continue;
			
			float dist = distance(seed * _InvResolution, (id.xy + 0.5) * _InvResolution);
			if (dist >= minDist)
				continue;
			
			minDist = dist;
			minSeed = seed;
		}
	}

	_Result[id] = minSeed;
}

[numthreads(8, 8, 1)]
void CalculateMinMax(uint3 id : SV_DispatchThreadID)
{
	float2 seed = _Input[id];
	float dist = distance(seed * _InvResolution, (id.xy + 0.5) * _InvResolution);

	if (_Texture0[id].a >= 0.5)
	{
		InterlockedMax(_MaxDepths[1], asint(dist));
	}
	else
	{
		InterlockedMax(_MaxDepths[0], asint(dist));
	}
}

[numthreads(8, 8, 1)]
void Resolve(uint3 id : SV_DispatchThreadID)
{
	float2 seed = _Input[id];
	float dist = distance(seed * _InvResolution, (id.xy + 0.5) * _InvResolution);

	int2 coord = id;
	if (_Texture0[id].a < 0.5)
	{
		// Invert the distance
		dist = -dist;
		
		// There's a chance the seed falls slightly on a non-opaque pixel's edge. Do a 3x3 search to ensure we get a filled pixel
		float minDist = sqrt(2);
	
		for (int y = -1; y <= 1; y++)
		{
			for (int x = -1; x <= 1; x++)
			{
				int2 uv = int2(seed) + int2(x, y);
				if (any(uv < 0 || uv >= _Resolution))
					continue;
		
				float neighborAlpha = _Texture0[int3(uv, id.z)].a;
				if (neighborAlpha < 0.5)
					continue;
				
				float dist = distance(id.xy * _InvResolution, uv * _InvResolution);
				if (dist >= minDist)
					continue;
				
				minDist = dist;
				coord = uv;
			}
		}
	}
	
	float minDist = -asfloat(_MaxDepths[0]);
	float maxDist = asfloat(_MaxDepths[1]);
	
	float outDist = (dist - minDist) / (maxDist - minDist);
	_Texture0Write[id] = float4(_Texture0sRGB ? LinearToSrgb(_Texture0[int3(coord, id.z)].rgb) : _Texture0[int3(coord, id.z)].rgb, outDist);
	
	//_Texture0Write[id] = float4(_Texture0sRGB ? LinearToSrgb(_Texture0[int3(coord, id.z)].rgb) : _Texture0[int3(coord, id.z)].rgb, _Texture0[id].a);
	
	// Write textures
	if (_TextureCount > 1)
		_Texture1Write[id] = _Texture1sRGB ? LinearToSrgb(_Texture1[int3(coord, id.z)]) : _Texture1[int3(coord, id.z)];
	
	if (_TextureCount > 2)
		_Texture2Write[id] = _Texture2sRGB ? LinearToSrgb(_Texture2[int3(coord, id.z)]) : _Texture2[int3(coord, id.z)];
	
	if (_TextureCount > 3)
		_Texture3Write[id] = _Texture3sRGB ? LinearToSrgb(_Texture3[int3(coord, id.z)]) : _Texture3[int3(coord, id.z)];
	
	if (_TextureCount > 4)
		_Texture4Write[id] = _Texture4sRGB ? LinearToSrgb(_Texture4[int3(coord, id.z)]) : _Texture4[int3(coord, id.z)];
	
	if (_TextureCount > 5)
		_Texture5Write[id] = _Texture5sRGB ? LinearToSrgb(_Texture5[int3(coord, id.z)]) : _Texture5[int3(coord, id.z)];
	
	if (_TextureCount > 6)
		_Texture6Write[id] = _Texture6sRGB ? LinearToSrgb(_Texture6[int3(coord, id.z)]) : _Texture6[int3(coord, id.z)];
}