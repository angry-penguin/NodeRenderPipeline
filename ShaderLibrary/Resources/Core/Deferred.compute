#pragma kernel Deferred
#pragma enable_d3d11_debug_symbols

#define REFLECTION_PROBE_RENDERING

#include "Packages/com.arycama.noderenderpipeline/ShaderLibrary/Brdf.hlsl"
#include "Packages/com.arycama.noderenderpipeline/ShaderLibrary/Packing.hlsl"

Buffer<float> _SkyVisibilitySh;
RWTexture2D<float3> Result;
TextureCubeArray<float4> _GBuffer0, _GBuffer1;
TextureCubeArray<float3> _GBuffer2;
TextureCubeArray<float> Depth;
float4x4 _PixelCoordToViewDirWS;
uint _Offset;
float _Index;

float4x4 _ProbeWorldToLocal;
float3 _ProbeCenter;

[numthreads(8, 8, 1)]
void Deferred (uint2 id : SV_DispatchThreadID)
{	
	float3 V = -MultiplyVector(_PixelCoordToViewDirWS, float3(id + 0.5, 1.0), false);
	
	float depth = Depth.SampleLevel(_PointClampSampler, float4(V, _Index), 0.0);
	if(depth == _FarClipValue)
	{
		// If depth is empty, just render the sky. 
		Result[id] = _SkyReflection.SampleLevel(_LinearClampSampler, V, 0.0) * (_ExposureValue * rcp(_Exposure[uint2(0, 0)]));
		return;
	}
	
	// Load surface data from gbuffer
	float3 albedo = _GBuffer0.SampleLevel(_PointClampSampler, float4(V, _Index), 0.0).rgb;
	float3 gbuffer1 = _GBuffer1.SampleLevel(_PointClampSampler, float4(V, _Index), 0.0).rgb;
	float3 emission = _GBuffer2.SampleLevel(_PointClampSampler, float4(V, _Index), 0.0);

	float3 N = UnpackNormalOctQuadEncode(2.0 * Unpack888ToFloat2(gbuffer1) - 1.0);
	
	float linearEyeDepth = LinearEyeDepth(depth);
	float4 positionCS = float4(id + 0.5, depth, linearEyeDepth);
	float3 positionWS = PixelToWorld(positionCS.xyz) + _ReflectionCameraPosition - _WorldSpaceCameraPos;

	float skyVisibility = _SkyVisibilitySh[_Offset + 0];
	skyVisibility += _SkyVisibilitySh[_Offset + 1] * N.y;
	skyVisibility += _SkyVisibilitySh[_Offset + 2] * N.z;
	skyVisibility += _SkyVisibilitySh[_Offset + 3] * N.x;
	skyVisibility += _SkyVisibilitySh[_Offset + 4] * N.y * N.x;
	skyVisibility += _SkyVisibilitySh[_Offset + 5] * N.y * N.z;
	skyVisibility += _SkyVisibilitySh[_Offset + 6] * (3.0 * N.z * N.z - 1.0);
	skyVisibility += _SkyVisibilitySh[_Offset + 7] * N.x * N.z;
	skyVisibility += _SkyVisibilitySh[_Offset + 8] * (N.x * N.x - N.y * N.y);
	
	float3 luminance = albedo * (AmbientLight(N) * (_ExposureValue * rcp(_Exposure[uint2(0, 0)]))) * skyVisibility;
	
	for (uint i = 0; i < _DirectionalLightCount; i++)
	{
		DirectionalLightData lightData = _DirectionalLightData[i];
    
		// Earth shadow 
		float2 intersections;
		if (IntersectRaySphere(positionWS + _PlanetOffset, lightData.Direction, _PlanetRadius, intersections) && intersections.x >= 0.0)
			continue;
    
		// Intersect with probe bounds
		float3 lightingVector = GetReflectionVector(lightData.Direction, (float3x4) _ProbeWorldToLocal, positionWS + _WorldSpaceCameraPos, _ProbeCenter);
		float shadowDepth = Depth.SampleLevel(_PointClampSampler, float4(lightingVector, _Index), 0.0);
		
		// If not far clip plane, continue
		if(shadowDepth > 0.0)
			continue;
		
		float3 lightColor = TransmittanceToAtmosphere(positionWS  + _PlanetOffset, lightData.Direction) * (lightData.Color * _ExposureValue);
		luminance += albedo * saturate(dot(N, lightData.Direction)) * RcpPi * lightColor;
	}
	
	// Apply exposure for reflection emission, as we don't apply exposure when it is captured
	Result[id] = luminance + _ExposureValue * emission;
}