#pragma kernel CSMain
#pragma enable_d3d11_debug_symbols

#include "Packages/com.arycama.noderenderpipeline/ShaderLibrary/Core.hlsl"
#include "Packages/com.arycama.noderenderpipeline/ShaderLibrary/SpaceTransforms.hlsl"
#include "Packages/com.arycama.noderenderpipeline/ShaderLibrary/Utility.hlsl"

RWTexture2D<float3> _Result;
Texture2D<float3> _Input;
Texture2D<float> _Depth;

float _ApertureSize, _FocalDistance, _FocalLength, _SampleRadius, _MaxCoC, _SensorHeight;
uint _SampleCount;

float CalculateCoC(float depth)
{
	if (depth == _FocalDistance)
		return 1.0;
	
	return (_FocalLength / _ApertureSize) * abs(depth - _FocalDistance) / depth * (_FocalLength / 1000.0 / (_FocalDistance - _FocalLength / 1000.0));
}

float CocWeight(float coc)
{
	return rcp(coc);
}

[numthreads(8, 8, 1)]
void CSMain(uint2 id : SV_DispatchThreadID)
{
	_FocalDistance = LinearEyeDepth(_Depth[_ScreenSize.xy / 2]);
	
	float F = _FocalLength;
	float A = _FocalLength / _ApertureSize;
	float P = _FocalDistance;
	_MaxCoC = (A * F) / (P - F) / _SensorHeight * _ScreenSize.y;
	
	float centerDepth = LinearEyeDepth(_Depth[id]);
	float centerCoc = CalculateCoC(centerDepth);
	float centerWeight = CocWeight(centerCoc);
	
	float3 result = _Input[id] * centerWeight;
	float weightSum = centerWeight;
	
	_SampleCount = clamp(_SampleCount, 0, 32000);
	
	float noise = _BlueNoise1D[id % 64];
	for (uint i = 0; i < _SampleCount; i++)
	{
		float2 uv = id + VogelDiskSample(i, _SampleCount, noise * TwoPi) * _MaxCoC;
		
		if(any(uv < 0.0 || uv >= _ScreenSize.xy))
			continue;
		
		float sampleDepth = LinearEyeDepth(_Depth[uv]);
		float coc = CalculateCoC(sampleDepth);
		
		if (sampleDepth > centerDepth)
			coc = clamp(coc, 0.0, centerCoc);
		
		float weight = CocWeight(coc);
		float2 aspect = float2(_ScreenSize.x / _ScreenSize.y, 1);
		
		if (distance(id * _ScreenSize.zw * aspect, uv * _ScreenSize.zw * aspect) < coc)
		{
			result += _Input[uv] * weight;
			weightSum += weight;
		}
	}
	
	if(weightSum > 0.0)
		result *= rcp(weightSum);
	
	//result /= _SampleCount;
	
	_Result[id] = result;
}

[numthreads(8, 8, 1)]
void CSMain1(uint2 id : SV_DispatchThreadID)
{
	float4 result = 0.0;
	float noise = _BlueNoise1D[id % 64];
	
	float sampleDepth = length(PixelToWorld(id + 0.5, _Depth[id]));
	if (sampleDepth == _FocalLength)
	{
		_Result[id] = _Input[id];
		return;
	}
	
	float centerCoc = abs(CalculateCoC(sampleDepth)) * _SampleRadius;
	for (uint i = 0; i < _SampleCount; i++)
	{
		float2 uv = VogelDiskSample(i, _SampleCount, noise * TwoPi);
		float2 coord = id + uv * centerCoc;
		float depth = length(PixelToWorld(coord + 0.5, _Depth[coord]));
		
		float weight = depth > sampleDepth ? 1.0 : centerCoc;
		result.rgb += _Input[coord] * weight;
		result.a += weight;
	}
	
	if (result.a != 0.0)
		result.rgb *= rcp(result.a);
	
	_Result[id] = result.rgb;
}
